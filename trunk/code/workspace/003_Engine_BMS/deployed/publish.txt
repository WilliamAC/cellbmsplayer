在Web上使用基于JOGL技术的Applet

如何将在单机上调试好的applet使用在Web页面中呢？由于用到了JOGL技术，
因此使用起来与一般的applet不同。在此，需要用到JOGL Applet的启动器
（Launcher）。说是启动器，其实就是一个java类-- JOGLAppletLauncher。
Lilian Chamontin和其他JOGL社区的开发者合作开发了这个安装工具。
JOGLAppletLauncher继承类Applet，它已经作为一个com.sun.opengl.util
工具类被打包进jogl.jar进行发布。它需要开发者的主机有经过本地签名的
jogl.jar 和所有的jogl-natives jar，并且所有jar中的证书必须一致。
    开发这类applet的步骤很简单。首先，appelt中的标签“archive”参数必须
    包含jogl.jar、gluegen-rt.jar以及和该applet相关的jar文件。
   
    第二，服务器端用于包含applet中各种包的codebase路径下必须放入jogl.jar、
    gluegen-rt.jar和所有的jogl-natives-*.jar、gluegen-rt-natives-*.jar
    文件（这两者来自JOGL release builds提供的jogl-[version]-webstart.zip 
    和GlueGen runtime release builds提供的gluegen-rt-[version]-webstart.zip）。
    同时，该codebase路径中还要放入JOGL的本地库jogl.dll、gluegen-rt.dll、
    jogl_awt.dll和jogl_cg.dll。
   
    根据以上的方法，作者所开发的三维地形显示applet—myApplet.jar在Web页面上的调用如下：



<applet code="com.sun.opengl.util.JOGLAppletLauncher" 

     width=600 

     height=400 

     codebase="http://192.168.100.226:8080/myWork/lib" 

     archive="jogl.jar,gluegen-rt.jar,myApplet.jar"> 

  <param name="subapplet.classname" VALUE="terrainApplet.AppletEntry"> 

  <param name="subapplet.displayname" VALUE="terrainApplet"> 

  <param name="subapplet.urlString" VALUE="http://192.168.100.226:8080/myWork/data"> 

  <param name="progressbar" value="true"> 

  <param name="cache_archive" VALUE="jogl.jar,gluegen-rt.jar,myApplet.jar"> 

  <param name="cache_archive_ex" VALUE="jogl.jar;preload,gluegen-rt.jar;preload,myApplet.jar;preload"> 

</applet>
    其中标签参数subapplet.classname所指的是applet的入口类；
    标签参数subapplet.displayname所指的是applet用来进行显示的类包（package）；
    标签参数subapplet.urlString是自设定的、applet读取服务器端数据的URL路径。 

    JOGL的本地库和相关的包会自动下载到客户端的user's home路径下的.jogl_ext文件夹中。 


    另一个重要的问题是，由于applet在浏览器中运行时的权限是受限的,不能对本地文件进行读写,但是如果applet所在的jar文件如果是经过数字签名,并且用户信任该签名,那此applet则可对本地文件进行读写,相关内容已经在之前有所介绍，在这里主要论述本系统如何采用“数字签名”的方法实现applet下载到本地并进行读取。
    首先，生成数字证书。在DOS环境中使用一下语句： 

keytool -genkey -alias mykey -keystore mystore， 

运行此命令后,会提示填写相关信息。填写完毕之后，生成了一个名为mystore的keystore文件,该文件中保存有别名为mykey的数字证书。
    第二，使用下面的语句对已经打好的、包含applet的jar文件—myApplet.jar进行数字签名，当然需要注意证书和包的路径问题： 

jarsigner -keystore mystore myApplet.jar mykey。 

同样地，对“archive”参数中包含的其他包-- jogl.jar和gluegen-rt.jar等也要做同样的操作。 

至此，已经将“数字签名”的工作完成，这些jar文件就可以在Web页面中发挥作用了。

















